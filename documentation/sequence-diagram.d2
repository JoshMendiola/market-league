# Sequence Diagram v2.0

title: "Sequence Diagram v2.0" {
  shape: text
  near: top-center
  style: {
    font-size: 55
  }
}

# ######################
# # Boilerplate Setup ##
# ######################

direction: right
shape: sequence_diagram
"": {
  shape: person
}
Player
League
Stocks
Portfolio
Charts
Trade
Finnhub API

# ######################
# #  Boilerplate END  ##
# ######################

User Opens MarketLeague: {
  "" -> Player.play_game: login
  "" -> Player.play_game: sign up
  Player.play_game -> Player.play_game: create_player()
}

# Stock Market Loop
Stock Market Loop: {
  Stocks.daily_stock_update -> Finnhub API: get_stock_info(stock)
  Finnhub API -> Stocks.daily_stock_update: stock_info
}

# Creating League
Creating League: {
  Player.play_game -> League.league: create_league(player_id, league_id)
  League -> League: db.create_league()
  League -> Stocks.display_stocks: display_stocks(stock_id)
  Stocks.display_stocks -> Charts.stock_chart: display_charts(stock_id)
  Charts.stock_chart -> Stocks.display_stocks: stock_charts
  Stocks.display_stocks -> League: stock_info
}

# Drafting Stocks for League
Drafting Stocks: {
  Player.play_game -> League.league: select_stock(stock_id)
  League.league -> Stocks.stock_info: get_stock_info(stock_id)
  Stocks.stock_info -> Portfolio.users_portfolio: update_portfolio
  Portfolio.users_portfolio -> Stocks.stock_info: update_stock_owner(player_id, stock_id)
  Stocks.stock_info -> League.league: update league
  League.league -> Player.play_game: reflect changes
}

# Trading Stocks
Trading Stocks: {
  # Initial Trade Request
  Player.player -> League.league: trade(user, \[stock_id\])
  League.league -> Stocks.stock: get_stock_info
  Stocks.stock -> Trade.record_trade: create_trade
  Trade.record_trade -> Stocks.stock: trade_information
  Stocks.stock -> League.league: confirm trade created
  League.league -> Player.player: request trade confirmation

  # Trading Confirmation
  Player.player -> League.league: confirm_trade(trade_id)
  League.league -> Trade.record_trade: confirm_second_player()
  Trade.record_trade -> Trade.record_trade: check both players are confirmed
  Trade.record_trade -> Portfolio.update_portfolio: swap stocks
  Portfolio.update_portfolio -> Stocks.stock_update: change_ownership(player_id)
  Stocks.stock_update -> League.league: confirm_change(stock_id)
  League.league -> Player.player: display_trades()
}

# Close League
Close League: {
  Player.play_game -> League.league: close_league()
  League.league -> Player.play_game: show closed league
}

Player.play_game -> "": logout
